import turtle
from random import randint
import sys

s = turtle.Screen()
s.bgcolor("black")
s.setup(700, 600)

H = []  
H_energybar = []
pos_bar = 0
E_h = []
C_h = []
A = []
E_a = []
Carnes = []
H_cores = []
ID = []
Cap = []
S = 0

class SimSetup():
    def __init__(self, pos_bar) -> None:
        
        for j in range(2):
            E_h.append(100)
            C_h.append(0)
            E_a.append(60)
            
            # Create hunters    
            H.append(turtle.Turtle())
            
            # Create targets    
            A.append(turtle.Turtle())
            A[j].penup()
            A[j].goto(0, 50)
            Carnes.append(30)

            # Hunters' energy bars display
            H_energybar.append(turtle.Turtle())
            H_energybar[j].penup()
            H_energybar[j].setx(-300)
            H_energybar[j].sety(250 - pos_bar)
            pos_bar += 50

        H_cores.append("yellow")
        H_cores.append("blue")

        self.update_pos_bar(pos_bar)

    
    def update_pos_bar(self, pos_bar):
        return pos_bar



class SimRun():
    def __init__(self, pos_bar, S) -> None:
        self.pos_bar = pos_bar
        self.S = S
        for i in range(1, 201):
            s.update()
            self.add_target(i)
            self.add_hunter(i)
            self.hunters_energy_loss(i)
            self.targets_energy_loss(i)
            self.hunters_meat_consume(i)
            self.hunters_quantity_energy()
            self.Pos_h = []
            self.hunters_move()
            self.targets_move(i)
            self.detect_shock(i)

        self.show_hunters_records()


            
    # Addition of targets
    def add_target(self, moment: int):
        if randint(0, 10) == 7:
            A.append(turtle.Turtle())
            A[-1].penup()
            A[-1].goto(randint(-100, 100), randint(-100, 100))
            E_a.append(60)
            Carnes.append(30)
            print("t%d emerged (%d seconds)" % (len(A), moment))

    # Addition of hunters
    def add_hunter(self, moment: int):
        if self.S > 0:
            H.append(turtle.Turtle())
            H_energybar.append(turtle.Turtle())
            self.pos_bar = -50
            for j in range(len(H_energybar)):
                self.pos_bar += 50
                H_energybar[-1].penup()
                H_energybar[-1].setx(-300)
                H_energybar[-1].sety(250 - self.pos_bar)
                E_h.append(100)
                C_h.append(0)
            for y in range(len(E_h)):
                if E_h[y] > 100:
                    E_h[y] -= 50
                    if H_cores[y] == "yellow":
                        H_cores.append("yellow")
                    else:
                        H_cores.append("blue")
                    self.S = 0
                    print("h%d emerged (%d seconds)" % (len(H), moment))

    # Hunters' natural energy loss
    def hunters_energy_loss(self, moment: int):
        for j in range(len(E_h)):
            E_h[j] -= 1

            if E_h[j] == 0:
                H[j].ht()
                print("h%d died (%d seconds)" % (j + 1, moment))

    # Targets natural energy loss
    def targets_energy_loss(self, moment: int):
        for j in range(len(E_a)):
            if E_a[j] > -1:
                E_a[j] -= 1
            if E_a[j] == 0:
                A[j].ht()
                print("t%d died (%d seconds)" % (j + 1, moment))

    # Hunters' meat consume
    def hunters_meat_consume(self, moment: int):
        for j in range(len(ID)):
            if Carnes[ID[j][0]] > 0:
                Carnes[ID[j][0]] -= 1
                E_h[ID[j][1]] += 1
                C_h[ID[j][1]] += 1
                if E_h[ID[j][1]] > 100:
                    self.S += 1
                if Carnes[ID[j][0]] == 0:
                    print("Meat %d is over (%d seconds)" % (ID[j][0] + 1, moment))

    # Hunters' quantity of energy
    def hunters_quantity_energy(self):
        C = 0
        for h in H_energybar:
            if E_h[C] > 0:
                h.shape("square")
                h.color(H_cores[C])
                h.penup()
                h.clear()
                h.write(" h%d energy: %d" % (C + 1, E_h[C]), move=False, align="left", font=("Arial", 18, "normal"))
            else:
                h.clear()
                h.write(" h%d died" % (C + 1), move=False, align="left", font=("Arial", 18, "normal"))
            C += 1

    # Hunters' movement
    def hunters_move(self):
        c = 0
        #Pos_h = []
        for h in H:
            h.shape("arrow")
            h.color(H_cores[c])
            h.penup()
            h.setx(h.xcor() + randint(-20, 20))
            h.sety(h.ycor() + randint(-20, 20))
            if h.xcor() > 100:
                h.setx(100)
            if h.xcor() < -100:
                h.setx(-100)
            if h.ycor() > 100:
                h.sety(100)
            if h.ycor() < -100:
                h.sety(-100)
            h.clear()
            if E_h[c] > 0:
                h.write(" h%d" % (c + 1), move=False, align="left", font=("Arial", 18, "normal"))
            self.Pos_h.append([h.xcor(), h.ycor()])
            c += 1

    # Targets' movement
    def targets_move(self, moment: int):
        w = 0
        for a in A:
            a.shape("circle")
            a.color("orange")
            a.penup()
            a.setx(a.xcor() + randint(-20, 20))
            a.sety(a.ycor() + randint(-20, 20))
            if a.xcor() > 100:
                a.setx(100)
            if a.xcor() < -100:
                a.setx(-100)
            if a.ycor() > 100:
                a.sety(100)
            if a.ycor() < -100:
                a.sety(-100)

            # Detect targets being captured
            for u in range(len(self.Pos_h)):
                if a.xcor() - 15 <= self.Pos_h[u][0] <= a.xcor() + 15 and a.ycor() - 15 <= self.Pos_h[u][1] <= a.ycor() + 15:
                    if E_h[u] > 0 and E_a[w] > 0:
                        if w not in Cap:
                            ID.append([w, u])
                            print("h%d captured t%d (%d seconds)" % (u + 1, w + 1, moment))
                            Cap.append(w)
                            E_a[w] = -1
                            a.ht()
                            w += 1

    # Detect shock between two hunters
    def detect_shock(self, moment: int):
        for j in range(len(H)):
            for k in range(j + 1, len(H)):
                if self.Pos_h[k][0] - 15 <= self.Pos_h[j][0] <= self.Pos_h[k][0] + 15 and self.Pos_h[k][1] - 15 <= self.Pos_h[j][1] <= self.Pos_h[k][1] + 15:
                    if E_h[j] > E_h[k]:
                        for y in range(len(ID)):
                            if Carnes[ID[y][0]] > 0:
                                if ID[y][1] == k:
                                    print("h%d stole %d grams of meat %d from h%d (%d seconds)" %
                                        (j + 1, Carnes[ID[y][0]], ID[y][0] + 1, k + 1, moment))
                                    ID[y][1] = j
                    elif E_h[j] < E_h[k]:
                        for y in range(len(ID)):
                            if Carnes[ID[y][0]] > 0:
                                if ID[y][1] == j:
                                    print("h%d stole %d grams of meat %d from h%d (%d seconds)" %
                                        (k + 1, Carnes[ID[y][0]], ID[y][0] + 1, j + 1, moment))
                                    ID[y][1] = k
                    else:
                        if randint(0, 1) == 0:
                            for y in range(len(ID)):
                                if Carnes[ID[y][0]] > 0:
                                    if ID[y][1] == k:
                                        print("h%d stole %d grams of meat %d from h%d (%d seconds)" %
                                            (j + 1, Carnes[ID[y][0]], ID[y][0] + 1, k + 1, moment))
                                        ID[y][1] = j
                        else:
                            for y in range(len(ID)):
                                if Carnes[ID[y][0]] > 0:
                                    if ID[y][1] == j:
                                        print("h%d stole %d grams of meat %d from h%d (%d seconds)" %
                                            (k + 1, Carnes[ID[y][0]], ID[y][0] + 1, j + 1, moment))
                                        ID[y][1] = k

    # Hunters' records
    def show_hunters_records(self):
        print()
        for i in range(len(C_h)):
            print("h%d (%s) consumed %d grams of meat" % (i + 1, H_cores[i], C_h[i]))

        # Total number of targets that appeared at some point during the simulation
        print("Number of targets: %d" % (len(A)))

        # Number of hunters that survived until the end of the simulation
        print("Surviving hunters: ", end="")
        for i in range(len(E_h)):
            if E_h[i] > 0:
                print("h%d (%s)" % (i + 1, H_cores[i]), end="")

        sys.exit()





new_pos_bar = SimSetup(pos_bar)
SimRun(new_pos_bar, S)
